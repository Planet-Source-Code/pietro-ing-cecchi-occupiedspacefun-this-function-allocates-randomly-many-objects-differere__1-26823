{\rtf1\ansi\ansicpg1252\deff0\deftab720{\fonttbl{\f0\fswiss MS Sans Serif;}{\f1\froman\fcharset2 Symbol;}{\f2\fswiss\fprq2 System;}{\f3\fswiss MS Sans Serif;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue0;}
\deflang1040\pard\plain\f3\fs20\cf1 USAGE notes
\par    Even if this is a very small application, some notes of usage are needed: 1) usage of function, 2) usage of demo program.
\par    
\par  1) USAGE OF FUNCTION:
\par 
\par 1A) the function enums 
\par  Public Enum ActionCommandEnum
\par     ClearContainerRegion = 1
\par     AddObjectsToContainer = 2
\par     ShowCells = 4
\par     HideCells = 8
\par  End Enum
\par  Public Enum ReturnErrors
\par     NoERRORS = 0
\par     ErrorInCLEAR = 1
\par     ErrorInADD = 2
\par     ErrorInSHOWCELLS = 4
\par     ErrorInHIDECELLS = 8
\par  End Enum
\par 
\par 1B) the function  
\par      Public Function OccupiedSpaceFun(ByVal ContainerOBJ As Object, ByVal PopulatingOBJ As Object, ByVal ActionCommand As ActionCommandEnum, Optional ByRef IOvariable As Integer = 1) As ReturnErrors
\par 
\par 1C) a very important, input/output argument: IOvariable (all others are input only, i.e. ByVal)  
\par    IOvariable, optional, is used as follows:
\par    - during CLEAR, to output the calculated MaxAllocableObjectsNumber
\par      that can be used by the application to initially set the UpDown1.Max value
\par    - during ADD objects: A) to supply the function with the number of objects to add to
\par      the container B) to return to the application the real number of objects added to container
\par    
\par 1D) EXAMPLE OF USAGE of function:
\par    create a form and pull down a certain number of indexed objects (labels, images or whatsoever)
\par    pull down also a container (where the objects will be placed), i.e. a picture box, or you can use the form as container
\par    size at your pleasure both the container and each object
\par    create a module and place there the code (the enums and the function) of this module
\par    then use these calls (see enums for action commands and errors):
\par    CALLS:
\par       a) to clear and show cells (MaxAllocObjsNumber is returned). Check ret for error (no error: ret=0)
\par          ret = OccupiedSpaceFun(ChoosenContainer, Label1, ClearContainerRegion + ShowCells, MaxAllocObjsNumber)
\par             remember that MaxAllocObjsNumber after the call contains the max number of allocable abject
\par       b) to clear and hide cells (MaxAllocObjsNumber is returned). Check ret for error (no error: ret=0)
\par          ret = OccupiedSpaceFun(ChoosenContainer, Label1, ClearContainerRegion + HideCells, MaxAllocObjsNumber)
\par             MaxAllocObjsNumber as above
\par       c) to add objects to container (as input allocatenumber=number of objects to allocate,
\par                                       instead as returned value allocatenumber=number of objects really allocated,
\par                                       if not the same ret will be >0)
\par          ret = OccupiedSpaceFun(ChoosenContainer, Label1, AddObjectsToContainer, allocatenumber)
\par             remember to check both ret and allocatenumber, after the call
\par    NOTE:
\par       multiple commands are accepted. Anyway the following combinations
\par       give unvoreseen results, and should be avoided (particularly the combination of clear and add commands):
\par       clear + show + add  adds all! because clear returns MaxAllocObjsNumber that is considered the number of objects
\par                           to be added to container (to add a defined number use a separated dedicated call)
\par       clear + hide + show  result is an hide, because show is processed before hide (first shows, then hides cells)
\par    NOTE also:
\par       each action command may generate an error return (see error enum) in ret
\par       the first error verified exits the function with the relative error code
\par  end of example of usage of function
\par 
\par 1E) Mechanism of allocation
\par In allocating an object, the OccupiedSpaceFun follows these criteria:
\par    a) it tries 3 by 'max allocable objects number' times, a random allocation, of a random object
\par    b) in case on unsucces, it explores the available elemetary cells sequentially, for a possible allocation (more cells are involved, while allocating an object)
\par    c) if this further trial results in an unsuccess, it tries to allocate a different available object, choosen randomly
\par    e) should all of the above fail, the function exits, returning an error  (that, once detected by the demo program, blinks the cyan LED for few seconds) 
\par 
\par 
\par  2) USAGE OF DEMO PROGRAM:
\par 
\par 2A) run/design time command button, using 'run time' random sizing of objects:
\par When started, the program redimensions randomly all available objects (labels). This is made only once, so, even pushing the 'clear' button, the labels will come up always with the same dimensions (of course, at each 'clear', they will be located somewhereelse, in the same 'unoccupied space'). Same dimensions means same 'maximum allocable objects', as can be seen from add command caption or from etched menu comment, and hence same 'unoccupied space' (same elementary cell size and same number of cells composing the 'unoccupied space'.
\par To have a different size of labels you must restart the program ('maximum allocable objects number' will vary, because at any restart the total surface of objects, in general, varies) .
\par 
\par 2B) run/design time command button, using 'design time'  objects sizes:
\par In this case, the sizes assigned at design time are used. So, even if the objects will be located randomly, the elementary cell size will not vary, neither the number of them ('unoccupied space') nor  the max allocable objects number. Even restarting the program the elementary cell size and the number of cells will remain the same.
\par Only changing, at design time, the size of at least one object, the 'occupied space' configuration will change (cell size and number of cells + 'max allocable objects number').   
\par 
\par 2C) choose container command button
\par Two containers for the objects are provided, in this demo: The Form and a Picture. If the container is Picture (the grayed rectangle upon the command controls panel), as it happens at the start of the program, all allocated objects will be visible. Instaed, if the container is Form (the whole form, not a part of it), some of the allocated objects could not be visible, because covered by the command panel. To see them anyway, just click on the form area, and the command panel will disappear. Click again to let the command panel reappear.
\par 
\par 2D) clear command button
\par This command clears the container from any previously allocated object. Intrinsically also resets the 'add button' and the 'updown button' to initial values, basing on the 'max allocable objects number', returned by the OccupiedSpaceFun function, at 'action clear' processing.
\par 
\par 2E) add objects command button
\par This button, programmed by the updown button, at its right, will try to add a certain number of objects at once. Also all remaining objects (to program the button to all remaining objects, decrease the updown button till 0 is reached, at this time the add button will be disabled (no meaning of addin zero objects), CONTINUE decreasing pushing the updown button once more downward, and, because the wrap propertyin the updawn button, the add butto is now set to max remaining objects. This is much more easy to do than to explain, so please, try once, and you will learn it forever (the command panel has been, a little immodestly, optimized for maximum performance).
\par 
\par 2F) blinking cyan LED (located between the 'add objects command button' and the updown button)
\par Should the 'add objects command button' fail of adding all the programmed objects, this LED will blink for a while.
\par 
\par 2G) updown button
\par To program the number of objects to be added in the container, at any pushing of the 'add objects command button'
\par 
\par 2H) show/hide cells button
\par Shows or hides the 'occupied space' in terms of elementary cells (each cell consisting of the minimum width and height found in the objects collection to allocate in the container)
\par  
\par 2I) menu comment item
\par A visible but not enabled item of menu is, very unusually, used as a memo line to remind the 'maximum allocable objects number'
\par 
\par 2J) menu about item
\par Credits.
\par 
\par 2K) menu usage item
\par This page. The structure is very simple an may be used to create a sort of block notes, useful either during the design of an application, either to the use, as a reminder: an added space where to write something and retrieve it further!
\par  
\par       
\par 
\par \plain\f3\fs17\cf1 
\par }
 